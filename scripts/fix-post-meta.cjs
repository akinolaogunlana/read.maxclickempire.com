// update-post-meta.js (Hardened Version)
const fs = require("fs");
const path = require("path");
const cheerio = require("cheerio");

const postsDir = path.join(__dirname, "..", "posts");
const outputPath = path.join(__dirname, "post-meta.js");
const baseUrl = "https://read.maxclickempire.com/posts/";

const postMetadata = {};

try {
  const files = fs.readdirSync(postsDir).filter(file => file.endsWith(".html"));

  files.forEach(file => {
    const slug = file.replace(".html", "");
    const filePath = path.join(postsDir, file);
    const html = fs.readFileSync(filePath, "utf8");
    const $ = cheerio.load(html);

    const title = $("head title").text().trim();
    const description = $('meta[name="description"]').attr("content")?.trim() || "";
    const keywords = $('meta[name="keywords"]').attr("content")?.trim() || "";
    const ogImage = $('meta[property="og:image"]').attr("content")?.trim()
      || "https://read.maxclickempire.com/assets/og-image.jpg";

    if (!title || !description) {
      console.warn(`⚠️ Skipped ${file} due to missing <title> or <meta description>.`);
      return;
    }

    // Get filesystem modified date
    const stats = fs.statSync(filePath);
    const modified = stats.mtime.toISOString();

    // Get publish date from <time datetime="..."> or <!-- Published: ... -->
    let published = null;
    const datetimeTag = $('time[datetime]').attr("datetime");
    const commentDate = html.match(/<!--\s*Published:\s*(.*?)\s*-->/i);

    if (datetimeTag && !isNaN(Date.parse(datetimeTag))) {
      published = new Date(datetimeTag).toISOString();
    } else if (commentDate && !isNaN(Date.parse(commentDate[1]))) {
      published = new Date(commentDate[1]).toISOString();
    }

    if (!published) {
      console.warn(`❌ Skipped ${file} — no valid publish date found. Use <time datetime="..."> or <!-- Published: ... -->`);
      return;
    }

    if (new Date(published) > new Date(modified)) {
      console.warn(`⚠️ ${file}: Published date is after modified date. Adjusting...`);
      published = modified;
    }

    postMetadata[slug] = {
      title,
      description,
      keywords,
      image: ogImage,
      published,
      modified,
      canonical: `${baseUrl}${file}`
    };
  });

  // Output to JS file
  const output = `// Auto-generated by Supreme SEO Engine — DO NOT EDIT

window.postMetadata = ${JSON.stringify(postMetadata, null, 2)};
`;

  fs.writeFileSync(outputPath, output, "utf8");
  console.log(`✅ post-meta.js updated with ${Object.keys(postMetadata).length} entries.`);
} catch (err) {
  console.error("❌ Error updating post metadata:", err.message);
  process.exit(1);
}