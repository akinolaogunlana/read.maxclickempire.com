#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const cheerio = require("cheerio");

// Paths
const rawDir = path.join(__dirname, "raw");
const templatePath = path.join(__dirname, "template.html");
const distDir = path.join(__dirname, "dist");
const postMetaPath = path.join(__dirname, "data", "post-meta.js");

// Create dist if missing
if (!fs.existsSync(distDir)) fs.mkdirSync(distDir, { recursive: true });

// Load template
const template = fs.readFileSync(templatePath, "utf8");

// Utils
const generateHash = (content) =>
  crypto.createHash("sha256").update(content).digest("hex");

const slugify = (text) =>
  text.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "") || "post";

// Meta storage
const postMetadata = {};
const seenHashes = new Set();
const seenDescriptions = new Set();

const files = fs.readdirSync(rawDir).filter(f => f.endsWith(".html"));
let count = 0;

files.forEach(file => {
  const rawPath = path.join(rawDir, file);
  const rawHtml = fs.readFileSync(rawPath, "utf8");
  const $ = cheerio.load(rawHtml);

  const title = $("h1").first().text().trim() || "Untitled Post";
  const slug = slugify(title);
  const date = new Date().toISOString();
  const filename = `${slug}.html`;

  // Get meta description if exists
  let metaDescription = $('meta[name="description"]').attr('content')?.trim();
  if (!metaDescription || metaDescription.length < 40) {
    metaDescription = $("p").first().text().trim().replace(/\s+/g, " ");
  }
  if (!metaDescription || metaDescription.length < 40) {
    metaDescription = "A helpful guide from MaxClickEmpire. Read more now.";
  }

  // Remove duplicates
  if (seenDescriptions.has(metaDescription)) {
    console.log(`‚ö†Ô∏è Duplicate meta description skipped in: ${file}`);
    return;
  }
  seenDescriptions.add(metaDescription);

  // Extract clean content
  $("script").remove();
  $("[style]").removeAttr("style");
  const content = $("article").html() || $("body").html() || rawHtml;

  const clean = content
    .replace(/<meta[^>]+>/gi, "")
    .replace(/<script[\s\S]*?<\/script>/gi, "")
    .trim();

  const hash = generateHash(clean);
  if (seenHashes.has(hash)) {
    console.log(`‚ö†Ô∏è Skipped duplicate content: ${file}`);
    return;
  }
  seenHashes.add(hash);

  // Add to metadata object
  postMetadata[slug] = {
    title,
    description: metaDescription,
    image: "https://read.maxclickempire.com/assets/og-image.jpg",
    published: date
  };

  // Inject Structured Data
  const structuredData = `
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "${title}",
  "description": "${metaDescription}",
  "url": "https://read.maxclickempire.com/posts/${slug}.html",
  "datePublished": "${date}",
  "dateModified": "${date}",
  "image": "https://read.maxclickempire.com/assets/og-image.jpg",
  "author": { "@type": "Person", "name": "Ogunlana Akinola Okikiola" },
  "publisher": {
    "@type": "Organization",
    "name": "MaxClickEmpire",
    "logo": {
      "@type": "ImageObject",
      "url": "https://read.maxclickempire.com/assets/favicon.png"
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://read.maxclickempire.com/posts/${slug}.html"
  }
}
</script>`.trim();

  // Inject into template
  const finalHtml = template
    .replace(/{{TITLE}}/g, title)
    .replace(/{{DESCRIPTION}}/g, metaDescription)
    .replace(/{{KEYWORDS}}/g, title.split(/\s+/).join(", "))
    .replace(/{{FILENAME}}/g, slug)
    .replace(/{{DATE}}/g, date.split("T")[0])
    .replace(/{{CONTENT}}/g, clean)
    .replace(/{{STRUCTURED_DATA}}/g, structuredData);

  // Save final HTML
  const outputPath = path.join(distDir, filename);
  fs.writeFileSync(outputPath, finalHtml, "utf8");
  console.log(`‚úÖ Cleaned & Wrapped: ${filename}`);
  count++;
});

// Output post-meta.js
const metaOutput = `// Auto-generated by Supreme SEO Engine ‚Äî Do Not Edit

const postMetadata = ${JSON.stringify(postMetadata, null, 2)};

if (typeof module !== 'undefined' && module.exports) {
  module.exports.postMetadata = postMetadata;
} else if (typeof window !== 'undefined') {
  window.postMetadata = postMetadata;
}
`;

fs.writeFileSync(postMetaPath, metaOutput, "utf8");
console.log(`\nüß† Saved: data/post-meta.js with ${Object.keys(postMetadata).length} posts`);
console.log(`üéâ Done. ${count} unique posts processed.`);
